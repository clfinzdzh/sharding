package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import com.etcc.${package.ModuleName}.entity.dto.${entity}QueryDto;
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Service;
import static com.etcc.enums.CommonFrameBizStatus.NOT_FOUND_EXCEPTION;
import org.springframework.beans.factory.annotation.Autowired;
import com.etcc.exception.BusinessStatusException;
import java.util.List;

/**
 * @desc
 * @author ${author}
 * @date ${date}
 */
@Slf4j
@Service
@Primary
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> implements ${table.serviceName} {

    @Autowired
    private ${table.mapperName} ${table.entityPath}Mapper;

    @Override
    public ${entity} findById(Integer id) {
        ${entity} ${table.entityPath} = ${table.entityPath}Mapper.selectById(id);
            if (${table.entityPath} != null) return ${table.entityPath};
            else throw new BusinessStatusException(NOT_FOUND_EXCEPTION);
    }

    @Override
    public List<${entity}> findByIds(List<Integer> ids) {
        return ${table.entityPath}Mapper.selectByIds(ids);
    }

    @Override
    public Integer removeById(Integer id) {
        findById(id);
        return ${table.entityPath}Mapper.deleteById(id);
    }

    @Override
    public Integer removeByIds(List<Integer> ids) {
        return ${table.entityPath}Mapper.deleteByIds(ids);
    }

    @Override
    public Integer updateByCondition(${entity} ${table.entityPath}) {
        if (${table.entityPath} != null && ${table.entityPath}.getId() == null) {
            ${table.entityPath}Mapper.insert(${table.entityPath});
        } else {
            ${table.entityPath}Mapper.updateById(${table.entityPath});
        }
        return ${table.entityPath}.getId();
    }

    @Override
    public List<${entity}> findByCondition(${entity}QueryDto queryDto) {
        return ${table.entityPath}Mapper.selectByCondition(queryDto);
    }
}