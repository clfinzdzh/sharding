package ${package.Controller};
import com.etcc.base.BaseResult;
import com.etcc.${package.ModuleName}.entity.domain.${entity};
import com.etcc.${package.ModuleName}.adapter.${entity}Adapter;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.*;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import java.util.List;
import com.etcc.page.Pager;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.etcc.${package.ModuleName}.entity.vo.${entity}QueryVo;
import com.etcc.${package.ModuleName}.entity.dto.${entity}QueryDto;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.beans.factory.annotation.Autowired;
import ${package.Service}.${table.serviceName};
import com.etcc.${package.ModuleName}.entity.dto.${entity}Dto;
import com.etcc.${package.ModuleName}.entity.vo.${entity}Vo;
import org.springframework.validation.annotation.Validated;


/**
 * @desc
 * @author ${author}
 * @date ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    public ${table.serviceName} ${table.entityPath}Service;

    @GetMapping(value="/{id}")
    public BaseResult<${entity}Vo> findById(@PathVariable("id") Integer id){
        return BaseResult.success(${entity}Adapter.adapt${entity}Vo(${table.entityPath}Service.findById(id)));
    }

    @GetMapping
    public BaseResult<List<${entity}Vo>> findByIds(@RequestParam("ids") List<Integer> ids) {
        return BaseResult.success(${entity}Adapter.adapt${entity}Vos(${table.entityPath}Service.findByIds(ids)));
    }

    @GetMapping("/search")
    public BaseResult<Pager<${entity}QueryVo>> findByCondition(@RequestParam(value = "page", defaultValue = "1") int page,
                                                     @RequestParam(value = "size", defaultValue = "100") int size,
                                                     ${entity}QueryDto queryDto) {
        PageHelper.startPage(page, size);
        List<Ab> byCondition = ${table.entityPath}Service.findByCondition(queryDto);
        Pager pager = Pager.pager(new PageInfo(byCondition));
        pager.setPageData(${entity}Adapter.adapt${entity}QueryVos(byCondition));
        return BaseResult.success(pager);
    }

    @GetMapping("/search")
    public BaseResult<List<${entity}QueryVo>> findByCondition(@RequestParam(value = "page", defaultValue = "1") int page,
                                                                @RequestParam(value = "size", defaultValue = "100") int size,
                                                                ${entity}QueryDto queryDto) {
        List<Ab> byCondition = ${table.entityPath}Service.findByCondition(queryDto);
        return BaseResult.success(byCondition);
    }

    @PostMapping
    public BaseResult<String> updateByCondition(@Validated @RequestBody ${entity}Dto ${table.entityPath}Dto) {
        return BaseResult.success(${table.entityPath}Service.updateByCondition(${entity}Adapter.adapt${entity}(${table.entityPath}Dto)));
    }

    @DeleteMapping(value="/{id}")
    public BaseResult<AbVo> removeById(@PathVariable("id") Integer id){
        return BaseResult.success(abService.removeById(id));
    }

    @DeleteMapping
    public BaseResult<List<AbVo>> removeByIds(@RequestParam("ids") List<Integer> ids) {
        return BaseResult.success(abService.removeByIds(ids));
    }

}