package ${package.Controller};
import com.ems.common.base.BaseResult;
import com.ems.${package.ModuleName}.entity.domain.${entity};
import com.ems.${package.ModuleName}.adapter.${entity}Adapter;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.*;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import java.util.List;
import com.ems.common.utils.Safes;
import com.google.common.collect.Lists;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.beans.factory.annotation.Autowired;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${package.Service}.${table.serviceName};
import com.ems.${package.ModuleName}.entity.dto.${entity}Dto;
import com.ems.${package.ModuleName}.entity.vo.${entity}Vo;
import org.springframework.validation.annotation.Validated;


/**
 * @desc todo:
 * @author ${author}
 * @date ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    public ${table.serviceName} ${table.entityPath}Service;

    /**
    * @desc 根据主键查询
    * @param id
    * @return
    */
    @GetMapping(value="/{id})")
    public BaseResult<${entity}Vo> findById(@PathVariable("id") String id){
        return BaseResult.success(${entity}Adapter.adapt${entity}Vo(${table.entityPath}Service.findById(id)));
    }

    /**
     * @desc 根据唯一性约束查询
     * @param ${table.entityPath}Dto
     * @return
     */
    @GetMapping(value="/one")
    public BaseResult<${entity}Vo> findOne(${entity}Dto ${table.entityPath}Dto){
        return BaseResult.success(${entity}Adapter.adapt${entity}Vo(${table.entityPath}Service.findOne(${table.entityPath}Dto)));
    }

    /**
     * @desc 根据条件查询
     * @param ${table.entityPath}Dto
     * @return
     */
    @GetMapping(value="/list")
    public BaseResult<List<${entity}Vo>> findList(${entity}Dto ${table.entityPath}Dto){
        List<${entity}> ${table.entityPath}s = ${table.entityPath}Service.findList(${table.entityPath}Dto);
        List<${entity}Vo> vos = Lists.newArrayList();
        Safes.of(${table.entityPath}s).forEach(entity -> vos.add(${entity}Adapter.adapt${entity}Vo(entity)));
        return BaseResult.success(vos);
    }

    /**
     * @desc 根据条件分页查询
     * @param field,value
     * @return
     */
    @GetMapping(value="like/{value}")
    public BaseResult<Page<${entity}Vo>> findLike(String field,@PathVariable("value") String value){
        Page<${entity}> page = ${table.entityPath}Service.findLike(getPage(),field,value);
        return BaseResult.success(getPage(page).setRecords(${entity}Adapter.adapt${entity}Vos(page.getRecords())));
    }

    /**
     * @desc 根据条件分页查询
     * @param ${table.entityPath}Dto
     * @return
     */
    @PostMapping(value="/page")
    public BaseResult<Page<${entity}Vo>> findPageList(@RequestBody ${entity}Dto ${table.entityPath}Dto){
        Page<${entity}> page = ${table.entityPath}Service.findPageList(getPage(),${table.entityPath}Dto);
        return BaseResult.success(getPage(page).setRecords(${entity}Adapter.adapt${entity}Vos(page.getRecords())));
    }

    /**
     * @desc 新增一条记录
     * 注意：根据具体的业务场景选择性使用或者改造
     * @param ${table.entityPath}Dto
     * @return
     */
    @PostMapping
    public BaseResult<Integer> saveOne(@Validated @RequestBody ${entity}Dto ${table.entityPath}Dto){
        return BaseResult.success(${table.entityPath}Service.saveOne(${table.entityPath}Dto));
    }

    /**
     * @desc 根据主键更新
     * @param ${table.entityPath}Dto
     * @return
     */
    @PutMapping
    public BaseResult<Integer> modifyById(@RequestBody ${entity}Dto ${table.entityPath}Dto){
        return BaseResult.success(${table.entityPath}Service.modifyById(${table.entityPath}Dto));
    }

    /**
    * @desc 根据主键删除
    * @param id
    * @return
    */
    @DeleteMapping(value="/{id}")
    public BaseResult<Integer> removeById(@PathVariable("id") String id){
        return BaseResult.success(${table.entityPath}Service.removeById(id));
    }

    /**
    * @desc 根据主键删除一条记录（逻辑）
    * @param id
    * @return
    */
    @DeleteMapping(value="/logic/{id}")
    public BaseResult<Integer> removeByIdLogic(@PathVariable("id") String id){
        return BaseResult.success(${table.entityPath}Service.removeById(id));
    }
}